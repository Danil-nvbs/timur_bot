// front/src/pages/UsersPage.tsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  Avatar,
  IconButton,
  Menu,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  FormControl,
  InputLabel,
  Select,
  Snackbar,
  Alert,
} from '@mui/material';
import { MoreVert, Block, CheckCircle, AdminPanelSettings } from '@mui/icons-material';
import { User } from '../types';
import { apiService } from '../services/api';
import { useAuth } from '../contexts/AuthContext';

const UsersPage: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [roleDialogOpen, setRoleDialogOpen] = useState(false);
  const [newRole, setNewRole] = useState<'user' | 'admin' | 'owner'>('user');
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' });
  
  const { user: currentUser } = useAuth();

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        setLoading(true);
        const usersData = await apiService.getUsers();
        setUsers(usersData);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        showSnackbar('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, []);

  const showSnackbar = (message: string, severity: 'success' | 'error') => {
    setSnackbar({ open: true, message, severity });
  };

  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, user: User) => {
    setAnchorEl(event.currentTarget);
    setSelectedUser(user);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedUser(null);
  };

  const handleToggleStatus = async () => {
    if (!selectedUser) return;
    
    try {
      await apiService.toggleUserStatus(selectedUser.id);
      await refreshUsers();
      showSnackbar(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${selectedUser.isActive ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`,
        'success'
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      showSnackbar('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error');
    }
    
    handleMenuClose();
  };

  const handleRoleChange = async () => {
    if (!selectedUser) return;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if (selectedUser.role === 'owner') {
      showSnackbar('–†–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å', 'error');
      setRoleDialogOpen(false);
      return;
    }
    
    try {
      await apiService.updateUserRole(selectedUser.id, newRole);
      await refreshUsers();
      showSnackbar(`–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newRole}`, 'success');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
      showSnackbar('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏', 'error');
    }
    
    setRoleDialogOpen(false);
    handleMenuClose();
  };

  const refreshUsers = async () => {
    try {
      const usersData = await apiService.getUsers();
      setUsers(usersData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  };

  const canManageRole = (user: User | null) => {
    if (!user || !currentUser) return false;
    return currentUser.role === 'owner' && user.id !== currentUser.id && user.role !== 'owner';
  };
  

  const canManageStatus = (user: User | null) => {
    if (!user || !currentUser) return false;
    if (user.id === currentUser.id) return false; // –ù–µ–ª—å–∑—è –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è
    if (currentUser.role === 'owner') return true; // Owner –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏
    if (currentUser.role === 'admin' && user.role === 'user') return true; // Admin –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return false;
  };

  const getRoleIcon = (role: string) => {
    switch (role) {
      case 'owner': return 'üëë';
      case 'admin': return '‚ö°';
      case 'user': return 'üë§';
      default: return 'ÔøΩÔøΩ';
    }
  };

  const getRoleColor = (role: string) => {
    switch (role) {
      case 'owner': return 'error';
      case 'admin': return 'warning';
      case 'user': return 'default';
      default: return 'default';
    }
  };

  if (loading) {
    return <Typography>–ó–∞–≥—Ä—É–∑–∫–∞...</Typography>;
  }

  return (
    <Box>
      <Typography variant="h4" component="h1" gutterBottom>
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      </Typography>
      
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</TableCell>
              <TableCell>Telegram ID</TableCell>
              <TableCell>–¢–µ–ª–µ—Ñ–æ–Ω</TableCell>
              <TableCell>–†–æ–ª—å</TableCell>
              <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
              <TableCell>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</TableCell>
              <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {users.map((user) => (
              <TableRow key={user.id}>
                <TableCell>
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <Avatar sx={{ mr: 2 }}>
                      {user.firstName?.[0]}
                    </Avatar>
                    <Box>
                      <Typography variant="subtitle2">
                        {user.firstName} {user.lastName}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        @{user.username}
                      </Typography>
                    </Box>
                  </Box>
                </TableCell>
                <TableCell>{user.telegramId}</TableCell>
                <TableCell>{user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</TableCell>
                <TableCell>
                  <Chip
                    icon={<span>{getRoleIcon(user.role)}</span>}
                    label={user.role}
                    color={getRoleColor(user.role) as any}
                    size="small"
                  />
                </TableCell>
                <TableCell>
                  <Chip
                    icon={user.isActive ? <CheckCircle /> : <Block />}
                    label={user.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
                    color={user.isActive ? 'success' : 'error'}
                    size="small"
                  />
                </TableCell>
                <TableCell>
                  {new Date(user.createdAt).toLocaleDateString('ru-RU')}
                </TableCell>
                <TableCell>
                  <IconButton
                    onClick={(e) => handleMenuClick(e, user)}
                    disabled={user.id === currentUser?.id}
                  >
                    <MoreVert />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      {/* –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
      >
        {canManageRole(selectedUser) && (
          <MenuItem onClick={() => setRoleDialogOpen(true)}>
            <AdminPanelSettings sx={{ mr: 1 }} />
            –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å
          </MenuItem>
        )}
        {canManageStatus(selectedUser) && (
          <MenuItem onClick={handleToggleStatus}>
            {selectedUser?.isActive ? (
              <>
                <Block sx={{ mr: 1 }} />
                –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
              </>
            ) : (
              <>
                <CheckCircle sx={{ mr: 1 }} />
                –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
              </>
            )}
          </MenuItem>
        )}
      </Menu>

      {/* –î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ */}
      <Dialog open={roleDialogOpen} onClose={() => setRoleDialogOpen(false)}>
        <DialogTitle>–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</DialogTitle>
        <DialogContent>
          <Typography variant="body2" sx={{ mb: 2 }}>
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {selectedUser?.firstName} {selectedUser?.lastName}
          </Typography>
          <FormControl fullWidth>
            <InputLabel>–†–æ–ª—å</InputLabel>
            <Select
              value={newRole}
              onChange={(e) => setNewRole(e.target.value as 'user' | 'admin' | 'owner')}
              label="–†–æ–ª—å"
            >
              <MenuItem value="user">ÔøΩÔøΩ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</MenuItem>
              <MenuItem value="admin">‚ö° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</MenuItem>
              {/* –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ */}
              {selectedUser?.role !== 'owner' && (
                <MenuItem value="owner" disabled>
                  ÔøΩÔøΩ –í–ª–∞–¥–µ–ª–µ—Ü (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
                </MenuItem>
              )}
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setRoleDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button onClick={handleRoleChange} variant="contained">
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={3000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default UsersPage;