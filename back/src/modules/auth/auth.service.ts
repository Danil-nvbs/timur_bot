// back/src/modules/auth/auth.service.ts
import { Injectable, UnauthorizedException, BadRequestException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { InjectModel } from '@nestjs/sequelize';
import { User } from '../users/user.model';
import { OtpCode } from './otp.model';
import { TelegramService } from '../telegram/telegram.service';

@Injectable()
export class AuthService {
  constructor(
    @InjectModel(User)
    private userModel: typeof User,
    @InjectModel(OtpCode)
    private otpModel: typeof OtpCode,
    private jwtService: JwtService,
    private telegramService: TelegramService,
  ) {}

  async sendOtp(phone: string) {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:', phone);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const user = await this.userModel.findOne({ where: { phone } });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.id, user.role, '–ê–∫—Ç–∏–≤–µ–Ω:', user.isActive);
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if (!user.isActive) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      throw new UnauthorizedException('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!['admin', 'owner'].includes(user.role)) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤:', user.role);
      throw new UnauthorizedException('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OTP –∫–æ–¥
    const code = Math.floor(100000 + Math.random() * 900000).toString();
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç

    console.log('üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OTP –∫–æ–¥:', code, '–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:', expiresAt);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º OTP –∫–æ–¥
    await this.otpModel.create({
      userId: user.id,
      code,
      expiresAt,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
    await this.telegramService.sendOtpCode(user.telegramId, code);

    console.log('‚úÖ OTP –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    return { message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram' };
  }

  async verifyOtp(phone: string, code: string) {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ OTP:', phone, code);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.userModel.findOne({ where: { phone } });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ OTP');
      throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ OTP:', user.id);

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π OTP –∫–æ–¥
    const otpCode = await this.otpModel.findOne({
      where: {
        userId: user.id,
        code,
        isUsed: false,
      },
    });

    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π OTP –∫–æ–¥:', otpCode ? '–¥–∞' : '–Ω–µ—Ç');

    if (!otpCode) {
      console.log('‚ùå OTP –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω');
      throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (new Date() > otpCode.expiresAt) {
      console.log('‚ùå OTP –∫–æ–¥ –∏—Å—Ç–µ–∫');
      await otpCode.update({ isUsed: true });
      throw new BadRequestException('–ö–æ–¥ –∏—Å—Ç–µ–∫');
    }

    console.log('‚úÖ OTP –∫–æ–¥ –≤–∞–ª–∏–¥–µ–Ω');

    // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await otpCode.update({ isUsed: true });
    console.log('‚úÖ OTP –∫–æ–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const payload = { 
      sub: user.id, 
      phone: user.phone, 
      role: user.role,
      telegramId: user.telegramId 
    };
    
    const accessToken = this.jwtService.sign(payload);
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');

    return {
      access_token: accessToken,
      user: {
        id: user.id,
        firstName: user.firstName,
        lastName: user.lastName,
        phone: user.phone,
        role: user.role,
      },
    };
  }

  async validateUser(payload: any) {
    const user = await this.userModel.findByPk(payload.sub);
    
    if (!user) {
      console.log('‚ùå JWT Strategy: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      throw new UnauthorizedException();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if (!user.isActive) {
      console.log('‚ùå JWT Strategy: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      throw new UnauthorizedException('–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    }
    
    if (!['admin', 'owner'].includes(user.role)) {
      console.log('‚ùå JWT Strategy: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      throw new UnauthorizedException();
    }
    
    console.log('‚úÖ JWT Strategy: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.id, user.role);
    return user;
  }
}