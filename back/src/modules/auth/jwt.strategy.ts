// back/src/modules/auth/jwt.strategy.ts
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';
import { AuthService } from './auth.service';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(private authService: AuthService) {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: process.env.JWT_SECRET || 'your-secret-key',
    });
    console.log('ÔøΩÔøΩ JWT Strategy: –°–µ–∫—Ä–µ—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', process.env.JWT_SECRET || 'your-super-secret-jwt-key-12345');
    console.log('üîë JWT Strategy: –î–ª–∏–Ω–∞ —Å–µ–∫—Ä–µ—Ç–∞:', (process.env.JWT_SECRET || 'your-super-secret-jwt-key-12345').length);
  }

  async validate(payload: any) {
    console.log('ÔøΩÔøΩ JWT Strategy: –ü–æ–ª—É—á–µ–Ω payload:', payload);
    console.log('üîç JWT Strategy: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', payload.sub);
    
    const user = await this.authService.validateUser(payload);
    if (!user) {
      console.log('‚ùå JWT Strategy: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤');
      throw new UnauthorizedException();
    }
    console.log('‚úÖ JWT Strategy: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.id, user.role);
    return user;
  }
}