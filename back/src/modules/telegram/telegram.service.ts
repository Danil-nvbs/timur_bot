import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Bot } from 'grammy';
import { UsersService } from '../users/users.service';
import { ProductsService } from '../products/products.service';
import { OrdersService } from '../orders/orders.service';
import { CategoriesService } from '../categories/categories.service';
import { CartService } from '../cart/cart.service';

@Injectable()
export class TelegramService implements OnModuleInit {
  private readonly logger = new Logger(TelegramService.name);
  private readonly MIN_ORDER_AMOUNT = 3000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ä—É–±–ª—è—Ö
  private bot: Bot;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  private orderStates = new Map<number, { step: 'address' | 'confirm', tempOrder: any }>();

  constructor(
    private readonly usersService: UsersService,
    private readonly productsService: ProductsService,
    private readonly ordersService: OrdersService,
    private readonly categoriesService: CategoriesService,
    private readonly cartService: CartService,
  ) {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!token) {
      this.logger.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    this.bot = new Bot(token);
    this.logger.log('ü§ñ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async onModuleInit() {
    try {
      const me = await this.bot.api.getMe();
      this.logger.log(`ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω: @${me.username}`);
      
      this.bot.command('start', async (ctx) => {
        const telegramId = ctx.from?.id;
        const firstName = ctx.from?.first_name || '';
        const lastName = ctx.from?.last_name || '';
        const username = ctx.from?.username || '';
      
        if (!telegramId) {
          this.logger.error('Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

        this.logger.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–∞–ø–∏—Å–∞–ª /start`);
      
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        let user = await this.usersService.findByTelegramId(telegramId);
        
        if (!user) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          user = await this.usersService.findOrCreate(telegramId, {
            firstName,
            lastName,
            username,
            phone: null,
            role: 'user',
          });
          
          this.logger.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.id}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          await ctx.reply(
            `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n` +
            `–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.`,
            {
              reply_markup: {
                keyboard: [
                  [{
                    text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    request_contact: true
                  }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
              }
            }
          );
          
        } else if (!user.isActive) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
          await ctx.reply(
            `‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n` +
            `–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.`
          );
          return;
          
        } else if (!user.phone) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      await ctx.reply(
            `üëã –°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç, ${user.firstName}!\n\n` +
            `–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.`,
        {
          reply_markup: {
                keyboard: [
                  [{
                    text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    request_contact: true
                  }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
              }
            }
          );
          
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          await this.showMainMenu(ctx, user);
        }
      });
  
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
      this.bot.on('message:contact', async (ctx) => {
        const telegramId = ctx.from?.id;
        const contact = ctx.message?.contact;
      
        if (!telegramId || !contact?.phone_number) {
          await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          return;
        }
      
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        const user = await this.usersService.findByTelegramId(telegramId);
        
        if (!user) {
          await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –µ—â–µ —Ä–∞–∑.');
          return;
        }
      
        if (!user.isActive) {
          await ctx.reply('‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
          return;
        }
  
        // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º + –∏ –ø—Ä–æ–±–µ–ª—ã)
        let cleanPhone = contact.phone_number.replace(/[\s\+]/g, '');
        
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
        if (cleanPhone.startsWith('8') && cleanPhone.length === 11) {
          cleanPhone = '7' + cleanPhone.slice(1);
        }
  
        this.logger.log(`üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ø–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º: ${cleanPhone}`);
  
        try {
          // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω
          const user = await this.usersService.findByTelegramId(telegramId);
          
          if (!user) {
            await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –µ—â–µ —Ä–∞–∑.');
            return;
          }
  
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å ID
          if (!user.id) {
            this.logger.error('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID');
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –µ—â–µ —Ä–∞–∑.');
            return;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await this.usersService.updateUser(user.id, { phone: cleanPhone });
          
          this.logger.log(`‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –æ–±–Ω–æ–≤–ª–µ–Ω: ${cleanPhone}`);
  
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          await this.showMainMenu(ctx, { ...user.toJSON(), phone: cleanPhone });
          
        } catch (error) {
          this.logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${error.message}`);
          await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
      });
  
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–¥–µ–ª–∏–ª—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º)
      this.bot.on('message:text', async (ctx) => {
        const telegramId = ctx.from?.id;
        const text = ctx.message?.text;
      
        if (!telegramId || !text) return;
      
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await this.usersService.findByTelegramId(telegramId);
        
        if (!user || !user.isActive) {
          await ctx.reply('‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
          return;
        }
        
        if (!user.phone) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ø—Ä–æ—Å–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º
          await ctx.reply(
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞".`,
            {
              reply_markup: {
                keyboard: [
                  [{
                    text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    request_contact: true
                  }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
              }
            }
          );
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        const orderState = this.orderStates.get(user.id);
        if (orderState && orderState.step === 'address') {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å
          await this.handleAddressInput(ctx, user, text);
          return;
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await this.showMainMenu(ctx, user.toJSON());
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    this.bot.on('callback_query:data', async (ctx) => {
      const data = ctx.callbackQuery.data;
        
        console.log(`üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${data}`);
      
      switch (data) {
        case 'catalog':
          await this.showCatalog(ctx);
          break;
        case 'my_orders':
          await this.showMyOrders(ctx);
          break;
          case 'about':
            await this.showAbout(ctx);
            break;
          case 'support':
            await this.showSupport(ctx);
            break;
          case 'back_to_menu':
            const user = await this.usersService.findByTelegramId(ctx.from.id);
            if (!user) {
              this.logger.error('‚ùå back_to_menu: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
              await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –µ—â–µ —Ä–∞–∑.');
              return;
            }
            await this.showMainMenu(ctx, user);
            break;
          case 'cart':
            await this.showCart(ctx);
            break;
          case 'cart_clear':
            await this.clearCart(ctx);
            break;
          case 'checkout':
            await this.showCheckout(ctx);
            break;
          case 'confirm_order':
            await this.confirmOrder(ctx);
          break;
        default:
            if (data.startsWith('category_')) {
              const categoryId = parseInt(data.replace('category_', ''));
              await this.showCategory(ctx, categoryId);
            } else if (data.startsWith('subcategory_')) {
              const subcategoryId = parseInt(data.replace('subcategory_', ''));
              await this.showSubcategory(ctx, subcategoryId);
            } else if (data.startsWith('product_')) {
              const productId = parseInt(data.replace('product_', ''));
              await this.showProduct(ctx, productId);
            } else if (data.startsWith('add_to_cart_')) {
              const productId = parseInt(data.replace('add_to_cart_', ''));
              await this.addToCart(ctx, productId);
            } else if (data.startsWith('cart_inc_')) {
              const cartItemId = parseInt(data.replace('cart_inc_', ''));
              await this.updateCartQuantity(ctx, cartItemId, 1);
            } else if (data.startsWith('cart_dec_')) {
              const cartItemId = parseInt(data.replace('cart_dec_', ''));
              await this.updateCartQuantity(ctx, cartItemId, -1);
            } else if (data.startsWith('cart_remove_')) {
              const cartItemId = parseInt(data.replace('cart_remove_', ''));
              await this.removeFromCart(ctx, cartItemId);
            } else {
              // await ctx.answerCallbackQuery();
          }
          break;
      }
      
        // await ctx.answerCallbackQuery();
      });
  
      this.bot.catch((err) => {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ Telegram Bot:', err);
      });
      
      this.bot.start({ drop_pending_updates: true });
      this.logger.log('‚úÖ Telegram Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª polling');
      
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram Bot: ${error.message}`);
    }
  }
  
  private async showMainMenu(ctx: any, user: any) {
    if (!user || !user.id) {
      this.logger.error('‚ùå showMainMenu: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –µ–≥–æ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –µ—â–µ —Ä–∞–∑.');
      return;
    }

    const cartItems = await this.cartService.getCartItems(user.id);
    const cartCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);
  
    let message = `üéâ –û—Ç–ª–∏—á–Ω–æ, ${user.firstName}!\n\n` +
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤! üõí\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`
    let options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'catalog' }],
          [{ text: `üõç –ö–æ—Ä–∑–∏–Ω–∞ ${cartCount > 0 ? `(${cartCount})` : ''}`, callback_data: 'cart' }],
          [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }],
          [{ text: '‚ÑπÔ∏è –û –Ω–∞—Å', callback_data: 'about' }],
          [{ text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }]
        ]
      }
    }
    if (ctx.callbackQuery) {
      await ctx.editMessageText(
        message,
        options
      );
    } else {
      await ctx.reply(
        message,
        options
      );
    }
  }
  
  async sendOtpCode(telegramId: number, code: string) {
    try {
      await this.bot.api.sendMessage(
        telegramId,
        `üîê –ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É: ${code}\n\n‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç`
      );
      this.logger.log(`OTP –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP –∫–æ–¥–∞: ${error.message}`);
      throw error;
    }
  }

  private async showCatalog(ctx: any) {
    try {
      const categories = await this.categoriesService.findAll();
    
    if (categories.length === 0) {
      await ctx.editMessageText('üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –¢–æ–≤–∞—Ä—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!');
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
    const sortedCategories = categories.sort((a, b) => a.id - b.id);

    const keyboard = sortedCategories.map(category => [
        { 
          text: `${category.icon} ${category.name}`, 
          callback_data: `category_${category.id}` 
        }
    ]);
    
      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

    await ctx.editMessageText(
      'üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
      {
        reply_markup: {
          inline_keyboard: keyboard,
        },
      }
    );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞');
    }
  }

  private async showMyOrders(ctx: any) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const orders = await this.ordersService.getUserOrders(user.id);

      if (orders.length === 0) {
        await ctx.editMessageText(
          'üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
              ]
            }
          }
        );
        return;
      }

      let message = 'üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n\n';
      
      orders.forEach((order, index) => {
        message += `üì¶ –ó–∞–∫–∞–∑ #${order.id}\n`;
        message += `üí∞ –°—É–º–º–∞: ${order.totalPrice} ‚ÇΩ\n`;
        message += `üìç –ê–¥—Ä–µ—Å: ${order.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ${this.getOrderStatusText(order.status)}\n`;
        message += `üìÖ –î–∞—Ç–∞: ${new Date(order.createdAt).toLocaleDateString('ru-RU')}\n`;
        
        if (order.orderItems && order.orderItems.length > 0) {
          message += 'üõç –¢–æ–≤–∞—Ä—ã:\n';
          order.orderItems.forEach((item, itemIndex) => {
            message += `  ${itemIndex + 1}. ${item.product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'} √ó ${item.quantity}\n`;
          });
        }
        
        message += '\n';
      });

      await ctx.editMessageText(message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
  }

  private getOrderStatusText(status: string): string {
    switch (status) {
      case 'pending': return '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
      case 'confirmed': return '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
      case 'preparing': return 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è';
      case 'ready': return 'üì¶ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ';
      case 'delivered': return 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω';
      case 'cancelled': return '‚ùå –û—Ç–º–µ–Ω–µ–Ω';
      default: return status;
    }
  }

  private async showAbout(ctx: any) {
    await ctx.editMessageText(
      '‚ÑπÔ∏è –û –Ω–∞—Å\n\n' +
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤!\n\n' +
      '–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤–µ–∂–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º.',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      }
    );
  }

  private async showSupport(ctx: any) {
    await ctx.editMessageText(
      'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n' +
      '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n\n' +
      'üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n' +
      'üìß Email: support@timur-bot.com\n' +
      '‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–í—Å 9:00-21:00',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      }
    );
  }

  private async showCategory(ctx: any, categoryId: number) {
    try {
      const category = await this.categoriesService.findById(categoryId);
      if (!category) {
        await ctx.editMessageText('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
  
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const subcategories = await this.categoriesService.findSubcategoriesByCategory(categoryId);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π)
      const products = await this.productsService.findByCategory(categoryId);
  
      let message = `${category.icon} ${category.name}\n\n`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
      const keyboard = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID)
      if (subcategories.length > 0) {
        message += '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n';
        const sortedSubcategories = subcategories.sort((a, b) => a.id - b.id);
        sortedSubcategories.forEach(sub => {
          keyboard.push([{ text: `üìÅ ${sub.name}`, callback_data: `subcategory_${sub.id}` }]);
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–∞–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏)
      if (products.length > 0) {
        if (subcategories.length > 0) {
          message += '\n–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n';
        }
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–º–µ–Ω–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –≤ —Ä—è–¥
        const sortedProducts = products.sort((a, b) => a.name.localeCompare(b.name));
        for (let i = 0; i < sortedProducts.length; i += 2) {
          const row = [];
          row.push({ text: `üõí ${sortedProducts[i].name}`, callback_data: `product_${sortedProducts[i].id}` });
          if (sortedProducts[i + 1]) {
            row.push({ text: `üõí ${sortedProducts[i + 1].name}`, callback_data: `product_${sortedProducts[i + 1].id}` });
          }
          keyboard.push(row);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–∏ —Ç–æ–≤–∞—Ä–æ–≤
      if (subcategories.length === 0 && products.length === 0) {
        message += '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.';
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }]);
      
      await ctx.editMessageText(message, {
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
  }

  private async showSubcategory(ctx: any, subcategoryId: number) {
    try {
      const subcategory = await this.categoriesService.findSubcategoryById(subcategoryId);
      if (!subcategory) {
        await ctx.editMessageText('‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

      const products = await this.productsService.findBySubcategory(subcategoryId);
    
      if (products.length === 0) {
      await ctx.editMessageText(
          `üìÅ ${subcategory.name}\n\n–í —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.`,
        {
          reply_markup: {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: `category_${subcategory.categoryId}` }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
            ],
          },
        }
      );
      return;
    }

      await this.showProducts(ctx, products, subcategory.name);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
  }
  
  private async showProducts(ctx: any, products: any[], categoryName: string) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–º–µ–Ω–∏
    const sortedProducts = products.sort((a, b) => a.name.localeCompare(b.name));
    
    const productsPerPage = 5;
    const currentPage = 0; // –ü–æ–∫–∞ –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    
    const startIndex = currentPage * productsPerPage;
    const endIndex = startIndex + productsPerPage;
    const currentProducts = sortedProducts.slice(startIndex, endIndex);
  
    let message = `üõí ${categoryName}\n\n`;
    
    currentProducts.forEach((product, index) => {
      message += `${index + 1}. ${product.name}\n`;
      message += `   üí∞ ${product.price} ‚ÇΩ\n`;
      if (product.description) {
        message += `   üìù ${product.description}\n`;
      }
      message += `   [–ó–∞–∫–∞–∑–∞—Ç—å](callback_data:product_${product.id})\n\n`;
    });
  
    const keyboard = currentProducts.map((product, index) => [
      { 
        text: `üõí ${product.name} - ${product.price} ‚ÇΩ`, 
        callback_data: `product_${product.id}` 
      }
    ]);
  
    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard,
      },
    });
  }

  private async showProduct(ctx: any, productId: number) {
    try {
      const product = await this.productsService.findById(productId);
      if (!product) {
        await ctx.editMessageText('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
  
      let message = `üõç ${product.name}\n\n`;
      message += `üí∞ –¶–µ–Ω–∞: ${product.price} ‚ÇΩ\n\n`;
      if (product.description) {
        message += `üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n${product.description}\n\n`;
      }
      message += `üì¶ –î–æ—Å—Ç—É–ø–µ–Ω: ${product.isAvailable ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`;
  
      const keyboard = [
        [{ text: 'üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data: `add_to_cart_${product.id}` }],
        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', callback_data: `category_${product.categoryId}` }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ];
  
      await ctx.editMessageText(message, {
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞');
    }
  }

  private async addToCart(ctx: any, productId: number) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.answerCallbackQuery({ text:'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      const product = await this.productsService.findById(productId);
      if (!product) {
        await ctx.answerCallbackQuery({ text:'‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      if (!product.isAvailable) {
        await ctx.answerCallbackQuery({ text:'‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', show_alert: false });
        return;
      }
  
      await this.cartService.addToCart(user.id, productId, 1);
      await ctx.answerCallbackQuery({ 
        text: `‚úÖ ${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`, 
        show_alert: false 
      });
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
      // await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É', { show_alert: false });
    }
  }

  private async showCart(ctx: any) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
  
      const cartItems = await this.cartService.getCartItems(user.id);
      
      if (cartItems.length === 0) {
    await ctx.editMessageText(
          'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!',
      {
        reply_markup: {
          inline_keyboard: [
                [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ],
        },
      }
    );
        return;
      }
  
      let message = 'üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n';
      let total = 0;
  
      cartItems.forEach((item, index) => {
        const itemTotal = item.product.price * item.quantity;
        total += itemTotal;
        
        message += `${index + 1}. ${item.product.name}\n`;
        message += `   üí∞ ${item.product.price} ‚ÇΩ √ó ${item.quantity} = ${itemTotal} ‚ÇΩ\n`;
      });
  
      message += `üí≥ –ò—Ç–æ–≥–æ: ${total} ‚ÇΩ`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
      if (total < this.MIN_ORDER_AMOUNT) {
        message += `\n\n‚ö†Ô∏è –ó–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç ${this.MIN_ORDER_AMOUNT} ‚ÇΩ`;
      }

      const keyboard = []
      for (let item of cartItems) {
        keyboard.push([
          { text: `‚àí`, callback_data: `cart_dec_${item.id}` },
          { text: `${item.quantity}`, callback_data: `cart_info_${item.id}` },
          { text: `+`, callback_data: `cart_inc_${item.id}` },
        ])
        keyboard.push([{ text: `üóë ${item.product.name}`, callback_data: `cart_remove_${item.id}` }])
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—É–º–º–∞ >= MIN_ORDER_AMOUNT
      if (total >= this.MIN_ORDER_AMOUNT) {
        keyboard.push([
          { text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'checkout' },
          { text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'cart_clear' }
        ]);
      } else {
        keyboard.push([
          { text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'cart_clear' }
        ]);
      }
      
      keyboard.push([
        { text: 'üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'catalog' },
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }
      ]);
  
      await ctx.editMessageText(message, {
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã');
    }
  }

  private async handleAddressInput(ctx: any, user: any, address: string) {
    try {
      const orderState = this.orderStates.get(user.id);
      if (!orderState || orderState.step !== 'address') {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      orderState.tempOrder.address = address;
      orderState.step = 'confirm';
      this.orderStates.set(user.id, orderState);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      await this.showOrderConfirmation(ctx, user, orderState.tempOrder);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  private async showOrderConfirmation(ctx: any, user: any, tempOrder: any) {
    try {
      let message = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n';
      message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${this.formatPhone(user.phone)}\n`;
      message += `üìç –ê–¥—Ä–µ—Å: ${tempOrder.address}\n\n`;
      message += 'üõç –í–∞—à –∑–∞–∫–∞–∑:\n\n';

      tempOrder.cartItems.forEach((item, index) => {
        const itemTotal = item.product.price * item.quantity;
        message += `${index + 1}. ${item.product.name}\n`;
        message += `   üí∞ ${item.product.price} ‚ÇΩ √ó ${item.quantity} = ${itemTotal} ‚ÇΩ\n\n`;
      });

      message += `üí≥ –ò—Ç–æ–≥–æ: ${tempOrder.total} ‚ÇΩ\n\n`;
      message += '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.';

      await ctx.reply(message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'confirm_order' }],
            [{ text: 'üîô –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data: 'checkout' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ],
        },
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
  }

  private async updateCartQuantity(ctx: any, cartItemId: number, change: number) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      const cartItem = await this.cartService.getCartItems(user.id);
      const item = cartItem.find(ci => ci.id === cartItemId);
      
      if (!item) {
        await ctx.answerCallbackQuery({ text: '‚ùå –¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      const newQuantity = item.quantity + change;
      
      if (newQuantity <= 0) {
        await this.cartService.removeFromCart(cartItemId, user.id);
        await ctx.answerCallbackQuery({ text: '‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', show_alert: false });
      } else {
        await this.cartService.updateCartItemQuantity(cartItemId, user.id, newQuantity);
        await ctx.answerCallbackQuery({ text: '‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', show_alert: false });
      }
  
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
      await this.showCart(ctx);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error);
      await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã', show_alert: false });
    }
  }
  
  private async removeFromCart(ctx: any, cartItemId: number) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      await this.cartService.removeFromCart(cartItemId, user.id);
      await ctx.answerCallbackQuery({ text: '‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', show_alert: false });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
      await this.showCart(ctx);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', show_alert: false });
    }
  }
  
  private async clearCart(ctx: any) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      await this.cartService.clearCart(user.id);
      await ctx.answerCallbackQuery({ text: '‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', show_alert: false });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
      await this.showCart(ctx);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã', show_alert: false });
    }
  }
  
  private async showCheckout(ctx: any) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
  
      const cartItems = await this.cartService.getCartItems(user.id);
      const total = await this.cartService.getCartTotal(user.id);
  
      if (cartItems.length === 0) {
        await ctx.editMessageText('‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
      if (total < this.MIN_ORDER_AMOUNT) {
        await ctx.editMessageText(
          `‚ùå –ó–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç ${this.MIN_ORDER_AMOUNT} ‚ÇΩ\n\n–í–∞—à–∞ —Å—É–º–º–∞: ${total} ‚ÇΩ`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }],
                [{ text: 'üõç –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞', callback_data: 'cart' }]
              ]
            }
          }
        );
        return;
      }
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const tempOrder = {
        cartItems,
        total,
        user
      };
      this.orderStates.set(user.id, { step: 'address', tempOrder });

      let message = 'üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n';
      message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${this.formatPhone(user.phone)}\n\n`;
      message += 'üõç –í–∞—à –∑–∞–∫–∞–∑:\n\n';

      cartItems.forEach((item, index) => {
        const itemTotal = item.product.price * item.quantity;
        message += `${index + 1}. ${item.product.name}\n`;
        message += `   üí∞ ${item.product.price} ‚ÇΩ √ó ${item.quantity} = ${itemTotal} ‚ÇΩ\n\n`;
      });

      message += `üí≥ –ò—Ç–æ–≥–æ: ${total} ‚ÇΩ\n\n`;
      message += 'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:';

      await ctx.editMessageText(message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'cart' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ],
        },
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
  }
  
  private async confirmOrder(ctx: any) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const orderState = this.orderStates.get(user.id);
      if (!orderState || orderState.step !== 'confirm') {
        await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.');
        return;
      }

      const { cartItems, total, address } = orderState.tempOrder;

      if (cartItems.length === 0) {
        await ctx.editMessageText('‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –∞–¥—Ä–µ—Å–æ–º
      const order = await this.ordersService.createOrder(user.id, {
        status: 'pending',
        address: address,
        notes: `–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞`,
      });

      // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
      let orderTotal = 0;
      for (const cartItem of cartItems) {
        const itemTotal = cartItem.product.price * cartItem.quantity;
        orderTotal += itemTotal;
        
        await this.ordersService.createOrderItem({
          orderId: order.id,
          productId: cartItem.productId,
          quantity: cartItem.quantity,
          price: cartItem.product.price,
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
      await this.ordersService.updateOrderTotal(order.id, orderTotal);
  
      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await this.cartService.clearCart(user.id);
      this.orderStates.delete(user.id);
  
      let message = 'üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n';
      message += `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${order.id}\n`;
      message += `üí∞ –°—É–º–º–∞: ${orderTotal} ‚ÇΩ\n`;
      message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${this.formatPhone(user.phone)}\n`;
      message += `üìç –ê–¥—Ä–µ—Å: ${address}\n\n`;
      message += '‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n';
      message += '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.';

    await ctx.editMessageText(message, {
      reply_markup: {
        inline_keyboard: [
            [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }],
            [{ text: 'üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'catalog' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ],
      },
    });
  
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
      await this.notifyAdminsAboutNewOrder(order, user, orderTotal);
  
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }
  
  private async notifyAdminsAboutNewOrder(order: any, user: any, total: number) {
    try {
      const admins = await this.usersService.findAll();
      const adminUsers = admins.filter(u => ['admin', 'owner'].includes(u.role));
  
      for (const admin of adminUsers) {
        if (admin.telegramId) {
          const message = `üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n` +
            `üìã –ó–∞–∫–∞–∑ #${order.id}\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} ${user.lastName || ''}\n` +
            `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${this.formatPhone(user.phone)}\n` +
            `üí∞ –°—É–º–º–∞: ${total} ‚ÇΩ\n\n` +
            `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`;
  
          await this.bot.api.sendMessage(admin.telegramId, message);
        }
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤:', error);
    }
  }

  private formatPhone(phone: string): string {
    if (!phone) return '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    if (phone.length === 11 && phone.startsWith('7')) {
      return `+7 (${phone.slice(1, 4)}) ${phone.slice(4, 7)}-${phone.slice(7, 9)}-${phone.slice(9)}`;
    }
    
    return phone;
  }
}