import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Bot, InputFile } from 'grammy';
import { UsersService } from '../users/users.service';
import { ProductsService } from '../products/products.service';
import { OrdersService } from '../orders/orders.service';
import { CategoriesService } from '../categories/categories.service';
import { CartService } from '../cart/cart.service';
import { ReviewsService } from '../reviews/reviews.service';

@Injectable()
export class TelegramService implements OnModuleInit {
  private readonly logger = new Logger(TelegramService.name);
  private readonly MIN_ORDER_AMOUNT = 3000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ä—É–±–ª—è—Ö
  private bot: Bot;
  // –°–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: orderId -> { chatId, messageId }
  private orderStatusMessages = new Map<number, { chatId: number; messageId: number }>();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  private orderStates = new Map<number, { step: 'address' | 'confirm', tempOrder: any }>();

  constructor(
    private readonly usersService: UsersService,
    private readonly productsService: ProductsService,
    private readonly ordersService: OrdersService,
    private readonly categoriesService: CategoriesService,
    private readonly cartService: CartService,
    private readonly reviewsService: ReviewsService,
  ) {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!token) {
      this.logger.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    this.bot = new Bot(token);
    this.logger.log('ü§ñ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async onModuleInit() {
    try {
      const me = await this.bot.api.getMe();
      this.logger.log(`ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω: @${me.username}`);
      
      this.bot.command('start', async (ctx) => {
        const telegramId = ctx.from?.id;
        const firstName = ctx.from?.first_name || '';
        const lastName = ctx.from?.last_name || '';
        const username = ctx.from?.username || '';
      
        if (!telegramId) {
          this.logger.error('Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

        this.logger.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–∞–ø–∏—Å–∞–ª /start`);
      
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        let user = await this.usersService.findByTelegramId(telegramId);
        
        if (!user) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          user = await this.usersService.findOrCreate(telegramId, {
            firstName,
            lastName,
            username,
            phone: null,
            role: 'user',
          });
          
          this.logger.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.id}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          await ctx.reply(
            `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n` +
            `–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.`,
            {
              reply_markup: {
                keyboard: [
                  [{
                    text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    request_contact: true
                  }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
              }
            }
          );
          
        } else if (!user.isActive) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
          await ctx.reply(
            `‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n` +
            `–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.`
          );
          return;
          
        } else if (!user.phone) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      await ctx.reply(
            `üëã –°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç, ${user.firstName}!\n\n` +
            `–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.`,
        {
          reply_markup: {
                keyboard: [
                  [{
                    text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    request_contact: true
                  }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
              }
            }
          );
          
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          await this.showMainMenu(ctx, user);
        }
      });
  
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
      this.bot.on('message:contact', async (ctx) => {
        const telegramId = ctx.from?.id;
        const contact = ctx.message?.contact;
      
        if (!telegramId || !contact?.phone_number) {
          await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          return;
        }
      
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        const user = await this.usersService.findByTelegramId(telegramId);
        
        if (!user) {
          await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –µ—â–µ —Ä–∞–∑.');
          return;
        }
      
        if (!user.isActive) {
          await ctx.reply('‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
          return;
        }
  
        // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º + –∏ –ø—Ä–æ–±–µ–ª—ã)
        let cleanPhone = contact.phone_number.replace(/[\s\+]/g, '');
        
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
        if (cleanPhone.startsWith('8') && cleanPhone.length === 11) {
          cleanPhone = '7' + cleanPhone.slice(1);
        }
  
        this.logger.log(`üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ø–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º: ${cleanPhone}`);
  
        try {
          // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω
          const user = await this.usersService.findByTelegramId(telegramId);
          
          if (!user) {
            await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –µ—â–µ —Ä–∞–∑.');
            return;
          }
  
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å ID
          if (!user.id) {
            this.logger.error('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID');
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –µ—â–µ —Ä–∞–∑.');
            return;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await this.usersService.updateUser(user.id, { phone: cleanPhone });
          
          this.logger.log(`‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –æ–±–Ω–æ–≤–ª–µ–Ω: ${cleanPhone}`);
  
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          await this.showMainMenu(ctx, { ...user.toJSON(), phone: cleanPhone });
          
        } catch (error) {
          this.logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${error.message}`);
          await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
      });
  
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–¥–µ–ª–∏–ª—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º)
      this.bot.on('message:text', async (ctx) => {
        const telegramId = ctx.from?.id;
        const text = ctx.message?.text;
      
        if (!telegramId || !text) return;
      
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await this.usersService.findByTelegramId(telegramId);
        
        if (!user || !user.isActive) {
          await ctx.reply('‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
          return;
        }
        
        if (!user.phone) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ø—Ä–æ—Å–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º
          await ctx.reply(
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞".`,
            {
              reply_markup: {
                keyboard: [
                  [{
                    text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    request_contact: true
                  }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
              }
            }
          );
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        const orderState = this.orderStates.get(user.id);
        if (orderState && orderState.step === 'address') {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å
          await this.handleAddressInput(ctx, user, text);
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
        const pending = this.pendingReviews.get(user.id);
        if (pending) {
          try {
            await this.reviewsService.create({
              userId: user.id,
              productId: pending.target === 'product' ? pending.id : null,
              orderId: pending.orderId || (pending.target === 'order' ? pending.id : null),
              rating: pending.rating,
              text,
              photos: pending.photos && pending.photos.length ? pending.photos : null,
              hidden: false,
            } as any);
            const backCb = 'reviews_pending';
            this.pendingReviews.delete(user.id);
            await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.', { reply_markup: { inline_keyboard: [[{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: backCb }], [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]] } });
          } catch (e) {
            this.logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', e);
            const msg = (e as any)?.message?.includes('—É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω') ? `‚ùå ${(e as any).message}` : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            await ctx.reply(msg);
          }
          return;
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await this.showMainMenu(ctx, user.toJSON());
      });

      // –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∫–∞–∫ –æ—Ç–∑—ã–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É, –º—ã –∫–æ–ø–∏–º)
      this.bot.on('message:photo', async (ctx) => {
        const user = await this.usersService.findByTelegramId(ctx.from.id);
        if (!user) return;
        const pending = this.pendingReviews.get(user.id);
        if (!pending) return; // —Ñ–æ—Ç–æ –Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—Ç–∑—ã–≤–∞
        try {
          const photos = ctx.message.photo || [];
          const best = photos[photos.length - 1];
          const fileId = best?.file_id;
          if (!fileId) return;
          const file = await this.bot.api.getFile(fileId);
          const url = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ base64
          const res = await fetch(url);
          const buf = Buffer.from(await res.arrayBuffer());
          const b64 = `data:image/jpeg;base64,${buf.toString('base64')}`;
          // –ï—Å–ª–∏ –µ—Å—Ç—å caption ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∫–æ–ø–∏–º —Ñ–æ—Ç–æ –∏ –∂–¥—ë–º caption –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
          const state = this.pendingReviews.get(user.id);
          if (!state) return;
          state.photos.push(b64);
          this.pendingReviews.set(user.id, state);
          if (ctx.message.caption) {
            // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –ø–æ–¥–ø–∏—Å—å –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
            await this.reviewsService.create({
              userId: user.id,
              productId: state.target === 'product' ? state.id : null,
              orderId: state.orderId || (state.target === 'order' ? state.id : null),
              rating: state.rating,
              text: ctx.message.caption,
              photos: state.photos,
              hidden: false,
            } as any);
            const backCb = 'reviews_pending';
            this.pendingReviews.delete(user.id);
            await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.', { reply_markup: { inline_keyboard: [[{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: backCb }], [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]] } });
          } else {
            await ctx.reply('üì∑ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å (—Ç–µ–∫—Å—Ç), —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤.');
          }
        } catch (e) {
          this.logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ-–æ—Ç–∑—ã–≤–∞:', e);
          const msg = (e as any)?.message?.includes('—É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω') ? `‚ùå ${(e as any).message}` : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ-–æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
          await ctx.reply(msg);
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
      this.bot.on('callback_query:data', async (ctx) => {
      const data = ctx.callbackQuery.data;
        
        console.log(`üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${data}`);
      
      switch (data) {
        case 'reviews_more_global':
          await this.showLatestReviews(ctx, 0);
          break;
        case 'reviews_pending':
          await this.showPendingReviews(ctx);
          break;
        case 'catalog':
          await this.showCatalog(ctx);
          break;
        case 'my_orders':
          await this.showMyOrders(ctx);
          break;
          case 'about':
            await this.showAbout(ctx);
            break;
          case 'support':
            await this.showSupport(ctx);
            break;
          case 'back_to_menu':
            const user = await this.usersService.findByTelegramId(ctx.from.id);
            if (!user) {
              this.logger.error('‚ùå back_to_menu: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
              await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –µ—â–µ —Ä–∞–∑.');
              return;
            }
            await this.showMainMenu(ctx, user);
            break;
          case 'cart':
            await this.showCart(ctx);
            break;
          case 'cart_clear':
            await this.clearCart(ctx);
            break;
          case 'checkout':
            await this.showCheckout(ctx);
            break;
          case 'checkout_tricolor':
            await this.showCheckout(ctx, true);
            break;
          case 'confirm_order':
            await this.confirmOrder(ctx);
          break;
        default:
            if (data.startsWith('category_')) {
              const categoryId = parseInt(data.replace('category_', ''));
              await this.showCategory(ctx, categoryId);
            } else if (data.startsWith('subcategory_')) {
              const subcategoryId = parseInt(data.replace('subcategory_', ''));
              await this.showSubcategory(ctx, subcategoryId);
            } else if (data.startsWith('product_')) {
              const productId = parseInt(data.replace('product_', ''));
              await this.showProduct(ctx, productId);
            } else if (data.startsWith('product_reviews_')) {
              const productId = parseInt(data.replace('product_reviews_', ''));
              await this.showProductReviews(ctx, productId, 0);
            } else if (data.startsWith('product_reviews_more_')) {
              const [_, __, id, off] = data.split('_');
              await this.showProductReviews(ctx, parseInt(id), parseInt(off || '0'));
            } else if (data.startsWith('reviews_more_global_')) {
              const parts = data.split('_');
              const off = parseInt(parts[parts.length - 1] || '0');
              await this.showLatestReviews(ctx, off);
            } else if (data.startsWith('review_target_product_')) {
              const parts = data.split('_');
              // patterns: review_target_product_{productId} OR review_target_product_{productId}_{orderId}
              const productId = parseInt(parts[3]);
              const orderId = parts.length >= 5 ? parseInt(parts[4]) : undefined;
              // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –∏–∑ –∑–∞–∫–∞–∑–∞ –∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∑—ã–≤ ‚Äî –Ω–µ –¥–∞—ë–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
              if (orderId) {
                const user = await this.usersService.findByTelegramId(ctx.from.id);
                if (user) {
                  const exists = await this.reviewsService.existsForOrderProduct(user.id, orderId, productId);
                  if (exists) {
                    await ctx.answerCallbackQuery({ text: '‚ùå –û—Ç–∑—ã–≤ –ø–æ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω', show_alert: true });
                    await this.showOrderItemsForReview(ctx, orderId);
                    return;
                  }
                }
              }
              await this.askRating(ctx, 'product', productId, orderId);
            } else if (data.startsWith('review_target_order_')) {
              const orderId = parseInt(data.replace('review_target_order_', ''));
              await this.showOrderItemsForReview(ctx, orderId);
            } else if (data.startsWith('ask_rating_order_')) {
              const orderId = parseInt(data.replace('ask_rating_order_', ''));
              await this.askRating(ctx, 'order', orderId);
            } else if (data.startsWith('review_rate_')) {
              const parts = data.split('_');
              // patterns:
              // review_rate_order_{orderId}_{rating}
              // review_rate_product_{productId}_{rating}
              // review_rate_product_{productId}_{orderId}_{rating}
              const target = parts[2] as 'product' | 'order';
              if (target === 'order') {
                const orderId = parseInt(parts[3]);
                const rating = parseInt(parts[4]);
                await this.startReviewText(ctx, 'order', orderId, rating, undefined);
              } else {
                const productId = parseInt(parts[3]);
                let orderId: number | undefined = undefined;
                let ratingIdx = 4;
                if (parts.length === 6) {
                  orderId = parseInt(parts[4]);
                  ratingIdx = 5;
                }
                const rating = parseInt(parts[ratingIdx]);
                await this.startReviewText(ctx, 'product', productId, rating, orderId);
              }
            } else if (data.startsWith('add_to_cart_')) {
              const productId = parseInt(data.replace('add_to_cart_', ''));
              await this.addToCart(ctx, productId);
            } else if (data.startsWith('cart_inc_')) {
              const cartItemId = parseInt(data.replace('cart_inc_', ''));
              await this.updateCartQuantity(ctx, cartItemId, 1);
            } else if (data.startsWith('cart_dec_')) {
              const cartItemId = parseInt(data.replace('cart_dec_', ''));
              await this.updateCartQuantity(ctx, cartItemId, -1);
            } else if (data.startsWith('cart_remove_')) {
              const cartItemId = parseInt(data.replace('cart_remove_', ''));
              await this.removeFromCart(ctx, cartItemId);
            } else {
              // await ctx.answerCallbackQuery();
          }
          break;
      }
      
        // await ctx.answerCallbackQuery();
      });
  
      this.bot.catch((err) => {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ Telegram Bot:', err);
      });
      
      this.bot.start({ drop_pending_updates: true });
      this.logger.log('‚úÖ Telegram Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª polling');
      
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram Bot: ${error.message}`);
    }
  }
  
  private async showMainMenu(ctx: any, user: any) {
    if (!user || !user.id) {
      this.logger.error('‚ùå showMainMenu: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –µ–≥–æ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –µ—â–µ —Ä–∞–∑.');
      return;
    }

    const cartItems = await this.cartService.getCartItems(user.id);
    const cartCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);
  
    let message = `üéâ –û—Ç–ª–∏—á–Ω–æ, ${user.firstName}!\n\n` +
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤! üõí\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`
    let options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'catalog' }],
          [{ text: `üõç –ö–æ—Ä–∑–∏–Ω–∞ ${cartCount > 0 ? `(${cartCount})` : ''}`, callback_data: 'cart' }],
          [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }],
          [{ text: '‚≠ê –û—Ç–∑—ã–≤—ã', callback_data: 'reviews_more_global' }],
          [{ text: '‚ÑπÔ∏è –û –Ω–∞—Å', callback_data: 'about' }],
          [{ text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }]
        ]
      }
    }
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã, –≥–¥–µ –µ—Å—Ç—å –µ—â—ë —á—Ç–æ –æ—Ç—Ä–µ–≤—å—é–≤–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–û–∂–∏–¥–∞—é—Ç –æ—Ç–∑—ã–≤–æ–≤"
    try {
      const orders = await this.ordersService.getUserOrders(user.id);
      const delivered = orders.filter((o: any) => o.status === 'delivered');
      let hasPending = false;
      for (const o of delivered) {
        const orderReviewed = await this.reviewsService.existsForOrderByUser(user.id, o.id);
        if (!orderReviewed) { hasPending = true; break; }
        if (o.orderItems && o.orderItems.length > 0) {
          for (const it of o.orderItems) {
            const itemReviewed = await this.reviewsService.existsForOrderProduct(user.id, o.id, it.productId);
            if (!itemReviewed) { hasPending = true; break; }
          }
        }
        if (hasPending) break;
      }
      if (hasPending) {
        (options.reply_markup.inline_keyboard as any[]).splice(3, 0, [{ text: 'üïí –û–∂–∏–¥–∞—é—Ç –æ—Ç–∑—ã–≤–æ–≤', callback_data: 'reviews_pending' }]);
      }
    } catch {}
    
    if (ctx.callbackQuery) {
      await this.safeEditMessage(ctx, message, options);
    } else {
      await ctx.reply(message, options);
    }
  }
  
  async sendOtpCode(telegramId: number, code: string) {
    try {
      await this.bot.api.sendMessage(
        telegramId,
        `üîê –ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É: ${code}\n\n‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç`
      );
      this.logger.log(`OTP –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP –∫–æ–¥–∞: ${error.message}`);
      throw error;
    }
  }

  private async showCatalog(ctx: any) {
    try {
      const categories = await this.categoriesService.findAll();
    
    if (categories.length === 0) {
      await ctx.editMessageText('üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –¢–æ–≤–∞—Ä—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!');
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
    const sortedCategories = categories.sort((a, b) => a.id - b.id);

    const keyboard = sortedCategories.map(category => [
        { 
          text: `${category.icon} ${category.name}`, 
          callback_data: `category_${category.id}` 
        }
    ]);
    
      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

    await this.safeEditMessage(ctx,
      'üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
      {
        reply_markup: {
          inline_keyboard: keyboard,
        },
      }
    );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
      await this.safeEditMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞');
    }
  }

  private async showMyOrders(ctx: any) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const orders = await this.ordersService.getUserOrders(user.id);

      if (orders.length === 0) {
        await ctx.editMessageText(
          'üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
              ]
            }
          }
        );
        return;
      }

      let message = 'üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n\n';
      
      orders.forEach((order, index) => {
        message += `üì¶ –ó–∞–∫–∞–∑ #${order.id}\n`;
        message += `üí∞ –°—É–º–º–∞: ${order.totalPrice} ‚ÇΩ\n`;
        message += `üìç –ê–¥—Ä–µ—Å: ${order.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ${this.getOrderStatusText(order.status)}\n`;
        message += `üìÖ –î–∞—Ç–∞: ${new Date(order.createdAt).toLocaleDateString('ru-RU')}\n`;
        
        if (order.orderItems && order.orderItems.length > 0) {
          message += 'üõç –¢–æ–≤–∞—Ä—ã:\n';
          order.orderItems.forEach((item, itemIndex) => {
            message += `  ${itemIndex + 1}. ${item.product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'} √ó ${item.quantity}\n`;
          });
        }
        
        message += '\n';
      });

      await this.safeEditMessage(ctx, message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      await this.safeEditMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
  }

  private getOrderStatusText(status: string): string {
    switch (status) {
      case 'pending': return '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
      case 'confirmed': return '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
      case 'preparing': return 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è';
      case 'ready': return 'üì¶ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ';
      case 'delivered': return 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω';
      case 'cancelled': return '‚ùå –û—Ç–º–µ–Ω–µ–Ω';
      default: return status;
    }
  }

  private async showAbout(ctx: any) {
    await this.safeEditMessage(ctx,
      '‚ÑπÔ∏è –û –Ω–∞—Å\n\n' +
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤!\n\n' +
      '–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤–µ–∂–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º.',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      }
    );
  }

  private async showSupport(ctx: any) {
    await this.safeEditMessage(ctx,
      'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n' +
      '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n\n' +
      'üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n' +
      'üìß Email: support@timur-bot.com\n' +
      '‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–í—Å 9:00-21:00',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      }
    );
  }

  private async showReviewsMenu(ctx: any) {
    const message = '‚≠ê –û—Ç–∑—ã–≤—ã\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏.';
    await this.safeEditMessage(ctx, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã', callback_data: 'reviews_more_global' }],
          [{ text: 'üïí –û–∂–∏–¥–∞—é—Ç –æ—Ç–∑—ã–≤–æ–≤', callback_data: 'reviews_pending' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
        ]
      }
    });
  }

  private async showPendingReviews(ctx: any) {
    const user = await this.usersService.findByTelegramId(ctx.from.id);
    if (!user) {
      await this.safeEditMessage(ctx, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    const orders = await this.ordersService.getUserOrders(user.id);
    const delivered = orders.filter((o: any) => o.status === 'delivered');
    if (delivered.length === 0) {
      await this.safeEditMessage(ctx, '–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.', { reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'reviews_menu' }]] } });
      return;
    }
    let message = 'üïí –û–∂–∏–¥–∞—é—Ç –æ—Ç–∑—ã–≤–æ–≤:\n\n';
    const keyboard = [] as any[];
    for (const o of delivered) {
      const orderReviewed = await this.reviewsService.existsForOrderByUser(user.id, o.id);
      // –ü—Ä–æ–≤–µ—Ä–∏–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Ç–∑—ã–≤–æ–≤
      let hasRemainingItems = false;
      if (o.orderItems && o.orderItems.length > 0) {
        for (const it of o.orderItems) {
          const itemReviewed = await this.reviewsService.existsForOrderProduct(user.id, o.id, it.productId);
          if (!itemReviewed) { hasRemainingItems = true; break; }
        }
      }
      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∑—ã–≤ –ø–æ –∑–∞–∫–∞–∑—É –∏ –Ω–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑
      if (orderReviewed && !hasRemainingItems) {
        continue;
      }

      message += `–ó–∞–∫–∞–∑ #${o.id} ‚Äî ${new Date(o.createdAt).toLocaleDateString('ru-RU')}\n`;
      const row: any[] = [];
      if (hasRemainingItems) {
        row.push({ text: `–¢–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞`, callback_data: `review_target_order_${o.id}` });
      }
      if (!orderReviewed) {
        row.push({ text: `–û—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ`, callback_data: `ask_rating_order_${o.id}` });
      }
      // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–±–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–Ω–µ –¥–æ–ª–∂–Ω–æ –¥–æ–π—Ç–∏ —Å—é–¥–∞), –ø—Ä–æ–ø—É—Å—Ç–∏–º
      if (row.length > 0) {
        keyboard.push(row);
      }
    }
    if (keyboard.length === 0) {
      await this.safeEditMessage(ctx, '–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.', { reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'reviews_menu' }]] } });
      return;
    }
    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'reviews_menu' }]);
    await this.safeEditMessage(ctx, message, { reply_markup: { inline_keyboard: keyboard } });
  }

  private async showOrderItemsForReview(ctx: any, orderId: number) {
    try {
      const order = await this.ordersService.getOrderById(orderId);
      if (!order || !order.orderItems || order.orderItems.length === 0) {
        await this.safeEditMessage(ctx, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.', { reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'reviews_pending' }]] } });
        return;
      }
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      const keyboard: any[] = [];

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—â—ë –Ω–µ—Ç –æ—Ç–∑—ã–≤–∞
      const remaining: typeof order.orderItems = [] as any;
      console.log(order.orderItems)
      for (const item of order.orderItems) {
        console.log(await this.reviewsService.existsForOrderProduct(user.id, orderId, item.productId))
        const already = user ? await this.reviewsService.existsForOrderProduct(user.id, orderId, item.productId) : false;
        if (!already) remaining.push(item);
      }

      let message = `–ó–∞–∫–∞–∑ #${orderId}\n`;
      if (remaining.length > 0) {
        message += '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ —Ü–µ–ª–∏–∫–æ–º:';
        for (const item of remaining) {
          const name = item.product?.name || `–¢–æ–≤–∞—Ä ${item.productId}`;
          keyboard.push([{ text: name, callback_data: `review_target_product_${item.productId}_${orderId}` }]);
        }
      } else {
        message += '–ü–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É –æ—Ç–∑—ã–≤—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º.';
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∑—ã–≤–∞ –ø–æ –∑–∞–∫–∞–∑—É —Ü–µ–ª–∏–∫–æ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
      if (user) {
        const orderReviewed = await this.reviewsService.existsForOrderByUser(user.id, orderId);
        if (!orderReviewed) {
          keyboard.push([{ text: 'üìù –û—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ —Ü–µ–ª–∏–∫–æ–º', callback_data: `ask_rating_order_${orderId}` }]);
        }
      }
      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'reviews_pending' }]);

      await this.safeEditMessage(ctx, message, { reply_markup: { inline_keyboard: keyboard } });
    } catch (e) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤:', e);
      await this.safeEditMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞', { reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'reviews_pending' }]] } });
    }
  }

  private async showLatestReviews(ctx: any, offset: number = 0) {
    let reviews = await this.reviewsService.findLatestOrdersOnly(offset, 10);
    // –ï—Å–ª–∏ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∑–∞–∫–∞–∑–∞–º –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—é–±—ã–µ –æ—Ç–∑—ã–≤—ã (fallback)
    if (!reviews || reviews.length === 0) {
      reviews = await this.reviewsService.findLatestAll(offset, 10);
    }
    if (!reviews || reviews.length === 0) {
      await this.safeEditMessage(ctx, '–ü–æ–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.', {
        reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]] }
      });
      return;
    }
    let message = 'üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n';
    for (const r of reviews) {
      const stars = '‚≠ê'.repeat(r.rating || 0);
      const short = (r.text || '').slice(0, 200);
      message += `${stars} ${short}\n\n`;
    }
    const keyboard = [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]];
    if (reviews.length === 10) {
      keyboard.unshift([{ text: '–ï—â—ë', callback_data: `reviews_more_global_${offset + 10}` }]);
    }
    await this.safeEditMessage(ctx, message, { reply_markup: { inline_keyboard: keyboard } });
  }

  private async showProductReviews(ctx: any, productId: number, offset: number = 0) {
    const reviews = await this.reviewsService.findByProduct(productId, offset, 10);
    let message = 'üí¨ –û—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–µ:\n\n';
    if (!reviews || reviews.length === 0) {
      message += '–ü–æ–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.';
    } else {
      for (const r of reviews) {
        const stars = '‚≠ê'.repeat(r.rating || 0);
        const short = (r.text || '').slice(0, 300);
        message += `${stars} ${short}\n\n`;
      }
    }
    const keyboard = [[{ text: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data: `review_target_product_${productId}` }], [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `product_${productId}` }]];
    if (reviews.length === 10) {
      keyboard.unshift([{ text: '–ï—â—ë –æ—Ç–∑—ã–≤—ã', callback_data: `product_reviews_more_${productId}_${offset + 10}` }]);
    }
    await this.safeEditMessage(ctx, message, { reply_markup: { inline_keyboard: keyboard } });
  }

  // –ù–∞—á–∞–ª–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥, –∂–¥—ë–º —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ
  private pendingReviews = new Map<number, { target: 'product' | 'order'; id: number; rating: number; photos: string[]; orderId?: number }>();
  private async askRating(ctx: any, target: 'product' | 'order', id: number, orderId?: number) {
    const cb = (n: number) => target === 'product' && orderId
      ? `review_rate_${target}_${id}_${orderId}_${n}`
      : `review_rate_${target}_${id}_${n}`;
    const starsRow = [1,2,3,4,5].map(n => ({ text: `${n}‚≠ê`, callback_data: cb(n) }));
    await this.safeEditMessage(ctx, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É (1-5):', {
      reply_markup: { inline_keyboard: [starsRow, [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: target === 'product' ? `product_${id}` : 'my_orders' }]] }
    });
  }
  private async startReviewText(ctx: any, target: 'product' | 'order', id: number, rating: number, orderId?: number) {
    const user = await this.usersService.findByTelegramId(ctx.from.id);
    if (!user) {
      await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
      return;
    }
    // –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –ø–æ —Ç–æ–≤–∞—Ä—É –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–∞–∑–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â—ë —Ä–∞–∑, —á—Ç–æ –æ—Ç–∑—ã–≤ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω
    if (target === 'product' && orderId) {
      const exists = await this.reviewsService.existsForOrderProduct(user.id, orderId, id);
      if (exists) {
        await ctx.answerCallbackQuery({ text: '‚ùå –û—Ç–∑—ã–≤ –ø–æ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω', show_alert: true });
        await this.showOrderItemsForReview(ctx, orderId);
        return;
      }
    }
    this.pendingReviews.set(user.id, { target, id, rating, photos: [], orderId });
    await this.safeEditMessage(ctx, '‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.', {
      reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: target === 'product' ? `product_${id}` : 'my_orders' }]] }
    });
  }

  private async showCategory(ctx: any, categoryId: number) {
    try {
      const category = await this.categoriesService.findById(categoryId);
      if (!category) {
        await ctx.editMessageText('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
  
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const subcategories = await this.categoriesService.findSubcategoriesByCategory(categoryId);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π)
      const products = await this.productsService.findByCategory(categoryId);
  
      let message = `${category.icon} ${category.name}\n\n`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
      const keyboard = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID)
      if (subcategories.length > 0) {
        message += '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n';
        const sortedSubcategories = subcategories.sort((a, b) => a.id - b.id);
        sortedSubcategories.forEach(sub => {
          keyboard.push([{ text: `üìÅ ${sub.name}`, callback_data: `subcategory_${sub.id}` }]);
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–∞–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏)
      if (products.length > 0) {
        if (subcategories.length > 0) {
          message += '\n–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n';
        }
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–º–µ–Ω–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –≤ —Ä—è–¥
        const sortedProducts = products.sort((a, b) => a.name.localeCompare(b.name));
        for (let i = 0; i < sortedProducts.length; i += 2) {
          const row = [];
          row.push({ text: `üõí ${sortedProducts[i].name}`, callback_data: `product_${sortedProducts[i].id}` });
          if (sortedProducts[i + 1]) {
            row.push({ text: `üõí ${sortedProducts[i + 1].name}`, callback_data: `product_${sortedProducts[i + 1].id}` });
          }
          keyboard.push(row);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–∏ —Ç–æ–≤–∞—Ä–æ–≤
      if (subcategories.length === 0 && products.length === 0) {
        message += '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.';
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }]);
      
      await this.safeEditMessage(ctx, message, {
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      await this.safeEditMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
  }

  private async showSubcategory(ctx: any, subcategoryId: number) {
    try {
      const subcategory = await this.categoriesService.findSubcategoryById(subcategoryId);
      if (!subcategory) {
        await ctx.editMessageText('‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

      const products = await this.productsService.findBySubcategory(subcategoryId);
    
      if (products.length === 0) {
      await ctx.editMessageText(
          `üìÅ ${subcategory.name}\n\n–í —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.`,
        {
          reply_markup: {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: `category_${subcategory.categoryId}` }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
            ],
          },
        }
      );
      return;
    }

      await this.showProducts(ctx, products, subcategory.name);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
  }
  
  private async showProducts(ctx: any, products: any[], categoryName: string) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–º–µ–Ω–∏
    const sortedProducts = products.sort((a, b) => a.name.localeCompare(b.name));
    
    const productsPerPage = 5;
    const currentPage = 0; // –ü–æ–∫–∞ –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    
    const startIndex = currentPage * productsPerPage;
    const endIndex = startIndex + productsPerPage;
    const currentProducts = sortedProducts.slice(startIndex, endIndex);
  
    let message = `üõí ${categoryName}\n\n`;
    
    currentProducts.forEach((product, index) => {
      message += `${index + 1}. ${product.name}\n`;
      message += `   üí∞ ${product.price} ‚ÇΩ\n`;
      if (product.description) {
        message += `   üìù ${product.description}\n`;
      }
      message += `   [–ó–∞–∫–∞–∑–∞—Ç—å](callback_data:product_${product.id})\n\n`;
    });
  
    const keyboard = currentProducts.map((product, index) => [
      { 
        text: `üõí ${product.name} - ${product.price} ‚ÇΩ`, 
        callback_data: `product_${product.id}` 
      }
    ]);
  
    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard,
      },
    });
  }

  private async showProduct(ctx: any, productId: number) {
    try {
      const product = await this.productsService.findById(productId);
      if (!product) {
        await ctx.editMessageText('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      // –†–µ–π—Ç–∏–Ω–≥ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã (–¥–æ 5)
      const [stats, lastReviews] = await Promise.all([
        this.reviewsService.getProductStats(productId),
        this.reviewsService.findByProduct(productId, 0, 5),
      ]);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      let cartQuantity = 0;
      if (user) {
        const cartItems = await this.cartService.getCartItems(user.id);
        const cartItem = cartItems.find(item => item.productId === productId);
        cartQuantity = cartItem ? cartItem.quantity : 0;
      }
      
      const messageTextLines: string[] = [];
      messageTextLines.push(`üõç ${product.name}`);
      messageTextLines.push('');
      messageTextLines.push(`üí∞ –¶–µ–Ω–∞: ${product.price} ‚ÇΩ`);
      if (product.unit) {
        messageTextLines.push(`üìè –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${product.unit}`);
      }
      if (product.minQuantity && product.minQuantity > 1) {
        messageTextLines.push(`üì¶ –ú–∏–Ω. –∑–∞–∫–∞–∑: ${product.minQuantity}`);
      }
      if (stats?.count) {
        messageTextLines.push(`‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${stats.avg} (${stats.count})`);
      }
      if (cartQuantity > 0) {
        messageTextLines.push(`üõí –í –∫–æ—Ä–∑–∏–Ω–µ: ${cartQuantity} —à—Ç.`);
      }
      if (product.description) {
        messageTextLines.push('');
        messageTextLines.push('üìù –û–ø–∏—Å–∞–Ω–∏–µ:');
        messageTextLines.push(product.description);
      }
      if (lastReviews && lastReviews.length > 0) {
        messageTextLines.push('');
        messageTextLines.push('üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:');
        for (const r of lastReviews) {
          const short = (r.text || '').slice(0, 100);
          messageTextLines.push(`‚Ä¢ ${'‚≠ê'.repeat(r.rating)} ${short}`);
        }
      }
      messageTextLines.push('');
      messageTextLines.push(`üì¶ –î–æ—Å—Ç—É–ø–µ–Ω: ${product.isAvailable ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);

      const keyboard = [
        [{ text: 'üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data: `add_to_cart_${product.id}` }],
        [{ text: 'üí¨ –û—Ç–∑—ã–≤—ã', callback_data: `product_reviews_${product.id}` }],
        [{ text: 'üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'cart' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', callback_data: `category_${product.categoryId}` }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ];

      const caption = messageTextLines.join('\n');

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (base64), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç
      if (product.image) {
        try {
          // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ "—Å—ã—Ä—ã—Ö" base64, —Ç–∞–∫ –∏ data URL. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Buffer
          const dataUrlMatch = product.image.match(/^data:(image\/[a-zA-Z0-9.+-]+);base64,(.*)$/);
          let mime = 'image/jpeg';
          let base64Payload = product.image;
          if (dataUrlMatch) {
            mime = dataUrlMatch[1] || 'image/jpeg';
            base64Payload = dataUrlMatch[2];
          } else if (product.image.startsWith('data:')) {
            // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç data-url, fallback –Ω–∞ —Ç–µ–∫—Å—Ç
            throw new Error('Unsupported image data URL');
          }

          const buffer = Buffer.from(base64Payload, 'base64');
          const filename = `product.${mime.split('/')[1] || 'jpg'}`;

          if (ctx.callbackQuery) {
            // –ï—Å–ª–∏ —ç—Ç–æ callback (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º editMessageMedia
            try {
              await this.bot.api.editMessageMedia(
                ctx.chat.id,
                ctx.callbackQuery.message.message_id,
                {
                  type: 'photo',
                  media: new InputFile(buffer, filename),
                  caption,
                }
              );
              // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
              await this.bot.api.editMessageReplyMarkup(
                ctx.chat.id,
                ctx.callbackQuery.message.message_id,
                { reply_markup: { inline_keyboard: keyboard } }
              );
            } catch (editError) {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ: ' + (editError as any)?.message);
              await this.bot.api.sendPhoto(
                ctx.chat.id,
                new InputFile(buffer, filename),
                {
                  caption,
                  reply_markup: { inline_keyboard: keyboard },
                }
              );
            }
          } else {
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            await this.bot.api.sendPhoto(
              ctx.chat.id,
              new InputFile(buffer, filename),
              {
                caption,
                reply_markup: { inline_keyboard: keyboard },
              }
            );
          }
        } catch (e) {
          this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–µ–∫—Å—Ç: ' + (e as any)?.message);
          if (ctx.callbackQuery) {
            await this.safeEditMessage(ctx, caption, { reply_markup: { inline_keyboard: keyboard } });
          } else {
            await ctx.reply(caption, { reply_markup: { inline_keyboard: keyboard } });
          }
        }
      } else {
        if (ctx.callbackQuery) {
          await this.safeEditMessage(ctx, caption, { reply_markup: { inline_keyboard: keyboard } });
        } else {
          await ctx.reply(caption, { reply_markup: { inline_keyboard: keyboard } });
        }
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞');
    }
  }

  private async addToCart(ctx: any, productId: number) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.answerCallbackQuery({ text:'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      const product = await this.productsService.findById(productId);
      if (!product) {
        await ctx.answerCallbackQuery({ text:'‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      if (!product.isAvailable) {
        await ctx.answerCallbackQuery({ text:'‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', show_alert: false });
        return;
      }
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
      const existingCartItems = await this.cartService.getCartItems(user.id);
      const existingItem = existingCartItems.find(item => item.productId === productId);
      
      const minQuantity = product.minQuantity || 1;
      const step = product.step || 1;
      let quantityToAdd = step; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ–º —à–∞–≥
      let message = '';
      
      if (existingItem) {
        // –¢–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ - –¥–æ–±–∞–≤–ª—è–µ–º —à–∞–≥
        quantityToAdd = step;
        const unitLabel = product.unit ? ` ${product.unit}` : '';
        message = `‚úÖ ${product.name} (+${step}${unitLabel})`;
      } else {
        // –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ - –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        // –ï—Å–ª–∏ minQuantity –º–µ–Ω—å—à–µ —à–∞–≥–∞, —Å—Ç–∞—Ä—Ç—É–µ–º —Å–æ —à–∞–≥–∞
        quantityToAdd = Math.max(minQuantity, step);
        const unitLabel = product.unit ? ` ${product.unit}` : '';
        message = quantityToAdd > step 
          ? `‚úÖ ${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É (–º–∏–Ω. ${quantityToAdd}${unitLabel})!`
          : `‚úÖ ${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É (${step}${unitLabel})!`;
      }
      
      await this.cartService.addToCart(user.id, productId, quantityToAdd);
        
      await ctx.answerCallbackQuery({ 
        text: message, 
        show_alert: false 
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤ –∫–æ—Ä–∑–∏–Ω–µ
      await this.showProduct(ctx, productId);
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
      // await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É', { show_alert: false });
    }
  }

  private async showCart(ctx: any) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
  
      const cartItems = await this.cartService.getCartItems(user.id);
      
      if (cartItems.length === 0) {
    await ctx.editMessageText(
          'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!',
      {
        reply_markup: {
          inline_keyboard: [
                [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ],
        },
      }
    );
        return;
      }
  
      let message = 'üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n';
      let total = 0;
  
      cartItems.forEach((item, index) => {
        const itemTotal = item.product.price * item.quantity;
        total += itemTotal;
        
        const unitLabel = item.product.unit ? ` ${item.product.unit}` : '';
        message += `${index + 1}. ${item.product.name}\n`;
        message += `   üí∞ ${item.product.price} ‚ÇΩ √ó ${item.quantity}${unitLabel} = ${itemTotal} ‚ÇΩ\n`;
      });
  
      message += `üí≥ –ò—Ç–æ–≥–æ: ${total} ‚ÇΩ`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
      if (total < this.MIN_ORDER_AMOUNT) {
        message += `\n\n‚ö†Ô∏è –ó–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç ${this.MIN_ORDER_AMOUNT} ‚ÇΩ, –∑–∞–∫–∞–∑ –≤ –ñ–ö –¢—Ä–∏–∫–æ–ª–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É`;
      }

      const keyboard = []
      for (let item of cartItems) {
        keyboard.push([
          { text: `‚àí`, callback_data: `cart_dec_${item.id}` },
          { text: `${item.quantity}`, callback_data: `cart_info_${item.id}` },
          { text: `+`, callback_data: `cart_inc_${item.id}` },
        ])
        keyboard.push([{ text: `üóë ${item.product.name}`, callback_data: `cart_remove_${item.id}` }])
      }

      // –ö–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–≤ —Å—Ç–æ–ª–±–∏–∫)
      if (total >= this.MIN_ORDER_AMOUNT) {
        keyboard.push([{ text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'checkout' }]);
        keyboard.push([{ text: 'üèô –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ (–ñ–ö –¢—Ä–∏–∫–æ–ª–æ—Ä)', callback_data: 'checkout_tricolor' }]);
        keyboard.push([{ text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'cart_clear' }]);
      } else {
        keyboard.push([{ text: 'üèô –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ (–ñ–ö –¢—Ä–∏–∫–æ–ª–æ—Ä)', callback_data: 'checkout_tricolor' }]);
        keyboard.push([{ text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'cart_clear' }]);
      }

      // –ù–∞–≤–∏–≥–∞—Ü–∏—è (–≤ —Å—Ç–æ–ª–±–∏–∫)
      keyboard.push([{ text: 'üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'catalog' }]);
      keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);
  
      await ctx.editMessageText(message, {
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã');
    }
  }

  private async handleAddressInput(ctx: any, user: any, address: string) {
    try {
      const orderState = this.orderStates.get(user.id);
      if (!orderState || orderState.step !== 'address') {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      orderState.tempOrder.address = address;
      orderState.step = 'confirm';
      this.orderStates.set(user.id, orderState);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      await this.showOrderConfirmation(ctx, user, orderState.tempOrder);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  private async showOrderConfirmation(ctx: any, user: any, tempOrder: any) {
    try {
      let message = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n';
      message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${this.formatPhone(user.phone)}\n`;
      message += `üìç –ê–¥—Ä–µ—Å: ${tempOrder.address}\n\n`;
      message += 'üõç –í–∞—à –∑–∞–∫–∞–∑:\n\n';

      tempOrder.cartItems.forEach((item, index) => {
        const itemTotal = item.product.price * item.quantity;
        message += `${index + 1}. ${item.product.name}\n`;
        message += `   üí∞ ${item.product.price} ‚ÇΩ √ó ${item.quantity} = ${itemTotal} ‚ÇΩ\n\n`;
      });

      message += `üí≥ –ò—Ç–æ–≥–æ: ${tempOrder.total} ‚ÇΩ\n\n`;
      message += '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.';

      await ctx.reply(message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'confirm_order' }],
            [{ text: 'üîô –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data: 'checkout' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ],
        },
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
  }

  private async updateCartQuantity(ctx: any, cartItemId: number, change: number) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      const cartItem = await this.cartService.getCartItems(user.id);
      const item = cartItem.find(ci => ci.id === cartItemId);
      
      if (!item) {
        await ctx.answerCallbackQuery({ text: '‚ùå –¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      const step = item.product.step || 1;
      const newQuantity = item.quantity + change * step;
      const minQuantity = item.product.minQuantity || 1;
      
      if (newQuantity <= 0) {
        await this.cartService.removeFromCart(cartItemId, user.id);
        await ctx.answerCallbackQuery({ text: '‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', show_alert: false });
      } else if (newQuantity < minQuantity) {
        // –ï—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞
        if (change < 0) {
          await ctx.answerCallbackQuery({ 
            text: `‚ùå –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ (${minQuantity}${item.product.unit ? ` ${item.product.unit}` : ''}), –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä`, 
            show_alert: true 
          });
        } else {
          await ctx.answerCallbackQuery({ 
            text: `‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è ${item.product.name}: ${minQuantity}${item.product.unit ? ` ${item.product.unit}` : ''}`, 
            show_alert: true 
          });
        }
        return;
      } else {
        await this.cartService.updateCartItemQuantity(cartItemId, user.id, newQuantity);
        await ctx.answerCallbackQuery({ text: '‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', show_alert: false });
      }
  
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
      await this.showCart(ctx);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error);
      await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã', show_alert: false });
    }
  }
  
  private async removeFromCart(ctx: any, cartItemId: number) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      await this.cartService.removeFromCart(cartItemId, user.id);
      await ctx.answerCallbackQuery({ text: '‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', show_alert: false });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
      await this.showCart(ctx);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', show_alert: false });
    }
  }
  
  private async clearCart(ctx: any) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.answerCallbackQuery({ text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: false });
        return;
      }
  
      await this.cartService.clearCart(user.id);
      await ctx.answerCallbackQuery({ text: '‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', show_alert: false });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
      await this.showCart(ctx);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      await ctx.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã', show_alert: false });
    }
  }
  
  private async showCheckout(ctx: any, bypassMinAmount: boolean = false) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
  
      const cartItems = await this.cartService.getCartItems(user.id);
      const total = await this.cartService.getCartTotal(user.id);
  
      if (cartItems.length === 0) {
        await ctx.editMessageText('‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –Ω–µ bypass
      if (!bypassMinAmount && total < this.MIN_ORDER_AMOUNT) {
        await ctx.editMessageText(
          `‚ùå –ó–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç ${this.MIN_ORDER_AMOUNT} ‚ÇΩ\n\n–í–∞—à–∞ —Å—É–º–º–∞: ${total} ‚ÇΩ`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }],
                [{ text: 'üõç –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞', callback_data: 'cart' }]
              ]
            }
          }
        );
        return;
      }
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const tempOrder = {
        cartItems,
        total,
        user
      };
      this.orderStates.set(user.id, { step: 'address', tempOrder });

      let message = 'üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n';
      message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${this.formatPhone(user.phone)}\n\n`;
      message += 'üõç –í–∞—à –∑–∞–∫–∞–∑:\n\n';

      cartItems.forEach((item, index) => {
        const itemTotal = item.product.price * item.quantity;
        message += `${index + 1}. ${item.product.name}\n`;
        message += `   üí∞ ${item.product.price} ‚ÇΩ √ó ${item.quantity} = ${itemTotal} ‚ÇΩ\n\n`;
      });

      message += `üí≥ –ò—Ç–æ–≥–æ: ${total} ‚ÇΩ\n\n`;
      message += 'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:';

      await ctx.editMessageText(message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'cart' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ],
        },
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
  }
  
  private async confirmOrder(ctx: any) {
    try {
      const user = await this.usersService.findByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const orderState = this.orderStates.get(user.id);
      if (!orderState || orderState.step !== 'confirm') {
        await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.');
        return;
      }

      const { cartItems, total, address } = orderState.tempOrder;

      if (cartItems.length === 0) {
        await ctx.editMessageText('‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –∞–¥—Ä–µ—Å–æ–º
      const order = await this.ordersService.createOrder(user.id, {
        status: 'pending',
        address: address,
        notes: `–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞`,
      });

      // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
      let orderTotal = 0;
      for (const cartItem of cartItems) {
        const itemTotal = cartItem.product.price * cartItem.quantity;
        orderTotal += itemTotal;
        
        await this.ordersService.createOrderItem({
          orderId: order.id,
          productId: cartItem.productId,
          quantity: cartItem.quantity,
          price: cartItem.product.price,
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
      await this.ordersService.updateOrderTotal(order.id, orderTotal);
  
      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await this.cartService.clearCart(user.id);
      this.orderStates.delete(user.id);
  
      let message = 'üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n';
      message += `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${order.id}\n`;
      message += `üí∞ –°—É–º–º–∞: ${orderTotal} ‚ÇΩ\n`;
      message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${this.formatPhone(user.phone)}\n`;
      message += `üìç –ê–¥—Ä–µ—Å: ${address}\n\n`;
      message += '‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n';
      message += '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.';

    const updated = await ctx.editMessageText(message, {
      reply_markup: {
        inline_keyboard: [
            [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }],
            [{ text: 'üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'catalog' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ],
      },
    });

      // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Ç–∏–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      try {
        // updated –º–æ–∂–µ—Ç –±—ã—Ç—å Message
        const msg: any = updated;
        if (msg && msg.message_id && msg.chat?.id) {
          this.orderStatusMessages.set(order.id, { chatId: msg.chat.id, messageId: msg.message_id });
        } else if (ctx.callbackQuery?.message) {
          // fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          this.orderStatusMessages.set(order.id, { chatId: ctx.chat.id, messageId: ctx.callbackQuery.message.message_id });
        }
      } catch (e) {
        this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: ' + (e as any)?.message);
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
      await this.notifyAdminsAboutNewOrder(order, user, orderTotal);
  
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }
  
  private async notifyAdminsAboutNewOrder(order: any, user: any, total: number) {
    try {
      const admins = await this.usersService.findAll();
      const adminUsers = admins.filter(u => ['admin', 'owner'].includes(u.role));
  
      for (const admin of adminUsers) {
        if (admin.telegramId) {
          const message = `üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n` +
            `üìã –ó–∞–∫–∞–∑ #${order.id}\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} ${user.lastName || ''}\n` +
            `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${this.formatPhone(user.phone)}\n` +
            `üí∞ –°—É–º–º–∞: ${total} ‚ÇΩ\n\n` +
            `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`;
  
          await this.bot.api.sendMessage(admin.telegramId, message);
        }
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤:', error);
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥: –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –º—ã –µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º
  async updateOrderStatusMessage(orderId: number, newStatus: string) {
    try {
      const link = this.orderStatusMessages.get(orderId);
      if (!link) {
        this.logger.warn(`–ù–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
        return;
      }
      const text = `üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId}: ${this.getOrderStatusText(newStatus)}`;
      await this.bot.api.editMessageText(link.chatId, link.messageId, text);
    } catch (e) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: ' + (e as any)?.message);
    }
  }

  private formatPhone(phone: string): string {
    if (!phone) return '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    if (phone.length === 11 && phone.startsWith('7')) {
      return `+7 (${phone.slice(1, 4)}) ${phone.slice(4, 7)}-${phone.slice(7, 9)}-${phone.slice(9)}`;
    }
    
    return phone;
  }

  private async safeEditMessage(ctx: any, text: string, options?: any) {
    try {
      await ctx.editMessageText(text, options);
    } catch (error) {
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ), –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      if (error.message && error.message.includes('message is not modified')) {
        this.logger.debug('–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
        return;
      }
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ñ–æ—Ç–æ),
      // —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ:', error.message);
      try {
        await ctx.deleteMessage();
      } catch (deleteError) {
        this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', deleteError.message);
      }
      await ctx.reply(text, options);
    }
  }
}