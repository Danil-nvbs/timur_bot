import { Injectable, ExecutionContext, UnauthorizedException } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { Observable } from 'rxjs';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {
    console.log('üõ°Ô∏è JWT Guard: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    const request = context.switchToHttp().getRequest();
    const authHeader = request.headers.authorization;
    
    console.log('üîë JWT Guard: –ü–æ–ª–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization:', authHeader);
    
    if (authHeader) {
      const parts = authHeader.split(' ');
      console.log('üîç JWT Guard: –ß–∞—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞:', parts);
      console.log('üîç JWT Guard: Bearer —á–∞—Å—Ç—å:', parts[0]);
      console.log('üîç JWT Guard: –¢–æ–∫–µ–Ω —á–∞—Å—Ç—å:', parts[1] ? parts[1].substring(0, 20) + '...' : '–Ω–µ—Ç');
    }
    
    return super.canActivate(context);
  }

  handleRequest(err: any, user: any, info: any) {
    console.log('ÔøΩÔøΩ JWT Guard: handleRequest - err:', err ? err.message : '–Ω–µ—Ç', 'user:', user ? '–µ—Å—Ç—å' : '–Ω–µ—Ç', 'info:', info ? info.message : '–Ω–µ—Ç');
    
    if (err || !user) {
      console.log('‚ùå JWT Guard: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞');
      throw err || new UnauthorizedException();
    }
    
    console.log('‚úÖ JWT Guard: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    return user;
  }
}