// back/src/seed.ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ProductsService } from './modules/products/products.service';
import { UsersService } from './modules/users/users.service';
import { CategoriesService } from './modules/categories/categories.service';


async function seed() {
  const app = await NestFactory.createApplicationContext(AppModule);
  const productsService = app.get(ProductsService);
  const usersService = app.get(UsersService);
  const categoriesService = app.get(CategoriesService);

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
  let adminUser = await usersService.findByTelegramId(373531147);
  
  if (!adminUser) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    adminUser = await usersService.findOrCreate(373531147, {
      firstName: 'Danil',
      lastName: 'Osipov',
      username: 'DanilOsipov',
      phone: '79636871080',
      role: 'owner',
    });
    console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω:', adminUser);
  } else {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∞
    adminUser = await usersService.updateUser(adminUser.id, {
      phone: '79636871080',
      role: 'owner',
      firstName: 'Danil',
      lastName: 'Osipov',
      username: 'DanilOsipov',
    });
    console.log('‚úÖ –ê–¥–º–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω:', adminUser);
  }

  
  const testCategories = [
    {
      name: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
      description: '–°–≤–µ–∂–∏–µ –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
      icon: 'ü•õ',
    },
    {
      name: '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
      description: '–°–≤–µ–∂–∏–π —Ö–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞',
      icon: 'ÔøΩÔøΩ',
    },
    {
      name: '–§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏',
      description: '–°–≤–µ–∂–∏–µ —Ñ—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏',
      icon: 'üçé',
    },
  ];

  for (const categoryData of testCategories) {
    const existingCategory = await categoriesService.findAll();
    if (!existingCategory.find(c => c.name === categoryData.name)) {
      const category = await categoriesService.create(categoryData);
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞:', category.name);
    }
  }


  const testProducts = [
    {
      name: '–ú–æ–ª–æ–∫–æ 3.2%',
      description: '–°–≤–µ–∂–µ–µ –∫–æ—Ä–æ–≤—å–µ –º–æ–ª–æ–∫–æ, 1 –ª–∏—Ç—Ä',
      price: 89.50,
      categoryId: 1, // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
      isAvailable: true,
    },
    {
      name: '–•–ª–µ–± –±–µ–ª—ã–π',
      description: '–°–≤–µ–∂–∏–π –±–µ–ª—ã–π —Ö–ª–µ–± –∏–∑ –ø–µ–∫–∞—Ä–Ω–∏',
      price: 45.00,
      categoryId: 2, // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"
      isAvailable: true,
    },
    {
      name: '–Ø–±–ª–æ–∫–∏ –∫—Ä–∞—Å–Ω—ã–µ',
      description: '–°–≤–µ–∂–∏–µ –∫—Ä–∞—Å–Ω—ã–µ —è–±–ª–æ–∫–∏, 1 –∫–≥',
      price: 120.00,
      categoryId: 3, // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏"
      isAvailable: true,
    },
    {
      name: '–ö—É—Ä–∏—Ü–∞ —Ü–µ–ª–∞—è',
      description: '–°–≤–µ–∂–∞—è –∫—É—Ä–∏—Ü–∞, 1.5 –∫–≥',
      price: 350.00,
      categoryId: 3, // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏" (–∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú—è—Å–æ")
      isAvailable: true,
    },
  ];

  console.log('üå± –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã...');
  
  for (const productData of testProducts) {
    const existingProducts = await productsService.findAll();
    if (!existingProducts.find(p => p.name === productData.name)) {
      const product = await productsService.create(productData);
      console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω:', product.name);
    }
  }


  console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
  await app.close();
}

seed().catch(console.error);